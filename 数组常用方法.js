数组的常用方法：

delete:删除数组元素

var a = new Array(1, 2, 3, 4);
delete a[2];
console.log(a[2]) // undefined
这样和直接把a[2]赋值为undefined类似，不会改变数组长度，也不会改变其他数据的index和value对应关系
//////////////////////////////////////////////////////////////////////////////////////////////////
栈方法
pop和push能够让我们使用堆栈那样先入后出使用数组
var a=new Array(1,2,3);
            a.push(4);
            console.log(a);//[1, 2, 3, 4] 
            console.log(a.length);//4
            console.log(a.pop(a));//4
            console.log(a); //[1, 2, 3] 
            console.log(a.length);//3

队列方法 先入先出
var a=new Array(1,2,3);
            a.unshift(4);
            console.log(a);//[4, 1, 2, 3] 
            console.log(a.length);//4
            console.log(a.shift(a));//4
            console.log(a); //[1, 2, 3] 
            console.log(a.length);//3
////////////////////////////////////////////////////////////////////////////////////////////////////////
splice()方法
splice() 方法向/从数组中添加/删除项目，然后返回被删除的项目。该方法会改变原始数组

splice(index, howmany, item1, ..., itemN)
index： 必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。
howmany： 必需。要删除的项目数量。如果设置为 0，则不会删除项目。
item1, ..., itemN：  可选。向数组添加的新项目。
////////////////////////////////////////////////////////////////////////////////////////////////////////
join()方法
把数组元素（对象调用其toString()方法）使用参数作为连接符连接成一字符串
var a=new Array(1,2,3,4,5);
       console.log(a.join(',')); //1,2,3,4,5 
       console.log(a.join(' ')); //1 2 3 4 5
/////////////////////////////////////////////////////////////////////////////////////////////////////////
slice(start,end)方法
方法用于返回数组中一个片段或子数组，如果只写一个参数返回参数到数组结束部分，如果参数出现负数，则从数组尾部计数
（-3意思是数组倒第三个，一般人不会这么干，但是在不知道数组长度，想舍弃后n个的时候有些用，不过数组长度很好知道。。。。，好纠结的用法），
如果start大于end返回空数组，值得注意的一点是slice不会改变原数组，而是返回一个新的数组。
var a=new Array(1,2,3,4,5);
            console.log(a); //[1, 2, 3, 4, 5] 
            console.log(a.slice(1,2));//2
            console.log(a.slice(1,-1));//[2, 3, 4] 
            console.log(a.slice(3,2));//[]
            console.log(a); //[1, 2, 3, 4, 5]
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
concat(array)
看起来像是剪切，但这个真不是形声字，concat方法用于拼接数组，a.concat(b)返回一个a和b共同组成的新数组，同样不会修改任何一个原始数组，也不会递归连接数组内部数组
var a=new Array(1,2,3,4,5);
            var b=new Array(6,7,8,9);
            console.log(a.concat(b));//[1, 2, 3, 4, 5, 6, 7, 8, 9] 
            console.log(a); //[1, 2, 3, 4, 5] 
            console.log(b); //[6, 7, 8, 9]
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
reverse()
方法用于将数组逆序，与之前不同的是它会修改原数组


var a=new Array(1,2,3,4,5);
            a.reverse();
            console.log(a); //[5, 4, 3, 2, 1]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
sort
sort方法用于对数组进行排序，当没有参数的时候会按字母表升序排序，如果含有undefined会被排到最后面，对象元素则会调用其toString方法，
如果想按照自己定义方式排序，可以传一个排序方法进去，很典型的策略模式，同样sort会改变原数组。
var a=new Array(5,4,3,2,1);
       a.sort();
       console.log(a);//[1, 2, 3, 4, 5]
不过······


var a=new Array(7,8,9,10,11);
       a.sort();
       console.log(a);//[10, 11, 7, 8, 9]
因为按照字母表排序，7就比10大了，这时候我们需要传入自定义排序函数
var a=new Array(7,8,9,10,11);
           a.sort(function(v1,v2){
            return v1-v2;
           });
       console.log(a);//[7, 8, 9, 10, 11]
sort内部使用快速排序，每次比较两个元素大小的时候如果没有参数，则直接判断字母表，如果有参数，
则把正在比较的两个参数传入自定义方法并调用（正在比较的两个数会传给自定义方法的v1、v2），
如果返回值大于0表示v1>v2，如果等于0，表示v1=v2，如果小于0，表示v1<v2，
其实我们传入的方法就是告诉sort怎么比较两个元素谁大谁小，至于排序移动元素过程人家写好了。    
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
js数组循环遍历数组内所有元素的方法

在js中数组遍历最简单的办法就是使用for然后再利用arr.length长度作为for最大限度值即可解决了，下面我们来看看一些有用的实例。



for(){}遍历数组

<script type="text/javascript">
 <!--
var arr = new Array(13.5,3,4,5,6);
for(var i=0;i<arr.length;i++){
 arr[i] = arr[i]/2.0;
}
alert(arr);
 //-->
 </script>

for in循环遍历数组


<html>
<body>
<script type="text/javascript">
var x
var mycars = new Array()
mycars[0] = "Saab"
mycars[1] = "Volvo"
mycars[2] = "BMW"
for (x in mycars)
{
document.write(mycars[x] + "<br />")
}
</script>
</body>
</html>
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
js数组与字符串的相互转换方法

1、数组转字符串
需要将数组元素用某个字符连接成字符串，示例代码如下：

var a, b;
a = new Array(0,1,2,3,4);
b = a.join("-");

2、字符串转数组

实现方法为将字符串按某个字符切割成若干个字符串，并以数组形式返回，示例代码如下：


var s = "abc,abcd,aaa";
ss = s.split(",");// 在每个逗号(,)处进行分解。   
